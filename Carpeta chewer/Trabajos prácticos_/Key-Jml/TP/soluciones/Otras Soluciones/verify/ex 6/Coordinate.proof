\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Oct 16 16:22:49 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=wdChecks-wdChecks\\:off , JavaCard-JavaCard\\:off , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , runtimeExceptions-runtimeExceptions\\:allow , integerSimplificationRules-integerSimplificationRules\\:full , Strings-Strings\\:on , reach-reach\\:on , assertions-assertions\\:on , wdOperator-wdOperator\\:L , initialisation-initialisation\\:disableStaticInitialisation , modelFields-modelFields\\:showSatisfiability
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Oct 16 16:22:49 CEST 2015
name=Coordinate[Coordinate\\:\\:translation(int)].JML normal_behavior operation contract.0
contract=Coordinate[Coordinate\\:\\:translation(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "chimento" ) (keyVersion "f29c982fc6c75827991e94a2a905e3419d01d6ee"))

(autoModeTime "1313")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0,0,0") (newnames "heapAtPre"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "translateJavaMulInt" (formula "1") (term "1,0,0,0,0,0,1,1"))
(rule "translateJavaMulInt" (formula "1") (term "1,1,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,1,0,0,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,1,1,0,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "8") (term "1,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "8") (term "0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "5"))
(rule "times_zero_1" (formula "5") (term "1,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "simplifyUpdate3" (formula "8") (term "1,0"))
(rule "polySimp_sepPosMonomial" (formula "8") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "8") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "0,0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_sepPosMonomial" (formula "8") (term "0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulAssoc" (formula "8") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "0,0,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "elementOfSetMinus" (formula "8") (term "0,0,0,0,1,0,1"))
(rule "elementOfAllLocs" (formula "8") (term "0,0,0,0,0,1,0,1"))
(rule "concrete_and_1" (formula "8") (term "0,0,0,0,1,0,1"))
(rule "elementOfFreshLocs" (formula "8") (term "0,0,0,0,0,1,0,1"))
(rule "neq_or_2" (formula "8") (term "0,0,0,1,0,1"))
(rule "concrete_or_1" (formula "8") (term "0,0,1,0,1"))
(rule "all_unused" (formula "8") (term "0,1,0,1"))
(rule "all_unused" (formula "8") (term "1,0,1"))
(rule "concrete_and_3" (formula "8") (term "0,1"))
(rule "Class_invariant_axiom_for_Coordinate" (formula "6") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "andLeft" (formula "6"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_translation,savedHeapBefore_translation"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "methodCallWithinClass" (formula "9") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "val_1"))
   (rule "assignment" (formula "9") (term "1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_moveUp,savedHeapBefore_moveUp"))
   (rule "simplifyUpdate2" (formula "9") (term "1"))
   (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
   (rule "greater_than_comparison_simple" (formula "9") (term "1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "simplifyUpdate3" (formula "9") (term "1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
   (rule "inEqSimp_gtToGeq" (formula "9") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,1,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,1,0"))
   (rule "replace_known_left" (formula "9") (term "0,0,1,0") (ifseqformula "5"))
   (rule "ifthenelse_true" (formula "9") (term "0,1,0"))
   (rule "ifSplit" (formula "9"))
   (branch "if x true"
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "boolean_equal" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "eval_order_access4_this" (formula "9") (term "1") (inst "#v1=x"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
      (rule "compound_addition_1" (formula "9") (term "1") (inst "#v=x_2"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
      (rule "assignment_read_attribute_this" (formula "9") (term "1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "assignmentAdditionInt" (formula "9") (term "1"))
      (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "applyOnElementary" (formula "9") (term "1,0"))
      (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0"))
      (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "9") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "9") (term "1,0,1,0"))
      (rule "assignment_write_attribute_this" (formula "9") (term "1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "applyOnElementary" (formula "9") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
      (rule "applyOnPV" (formula "9") (term "3,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
      (rule "eval_order_access4_this" (formula "9") (term "1") (inst "#v1=x"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_3"))
      (rule "compound_addition_1" (formula "9") (term "1") (inst "#v=x_4"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_4"))
      (rule "assignment_read_attribute_this" (formula "9") (term "1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "applyOnElementary" (formula "9") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "9") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "0,1,0"))
      (rule "assignmentAdditionInt" (formula "9") (term "1"))
      (rule "translateJavaAddInt" (formula "9") (term "0,0,1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "applyOnElementary" (formula "9") (term "1,0"))
      (rule "polySimp_addComm0" (formula "9") (term "1,0,1,0"))
      (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "9") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "9") (term "1,0,1,0"))
      (rule "assignment_write_attribute_this" (formula "9") (term "1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "applyOnElementary" (formula "9") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "9") (term "3,0,1,0"))
      (rule "applyOnPV" (formula "9") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "9") (term "3,0,1,0"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "methodCallWithinClass" (formula "9") (term "1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "val_2"))
      (rule "assignment" (formula "9") (term "1"))
      (rule "sequentialToParallel2" (formula "9"))
      (rule "simplifyUpdate3" (formula "9") (term "1,0"))
      (rule "applyOnElementary" (formula "9") (term "1,0"))
      (rule "applyOnPV" (formula "9") (term "0,1,0"))
      (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_explotion,savedHeapBefore_explotion"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyUpdate2" (formula "9") (term "1"))
      (rule "emptyStatement" (formula "9") (term "1"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_moveRight,exc_0,heapAfter_moveRight,anon_heap_moveRight") (contract "Coordinate[Coordinate::moveRight(int)].JML normal_behavior operation contract.0"))
      (branch "Post (moveRight)"
         (rule "translateJavaMulInt" (formula "9") (term "1,0,0,0,1,1,1,1,1"))
         (rule "translateJavaMulInt" (formula "9") (term "1,1,0,0,1,1,1,1,1"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "eqSymm" (formula "9") (term "0,0,0,1,1,1,1,1"))
         (rule "eqSymm" (formula "9") (term "1,0,0,1,1,1,1,1"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "andLeft" (formula "9"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "parallelWithSkip2" (formula "9") (term "0"))
         (rule "applyOnElementary" (formula "10") (term "1,0"))
         (rule "applyOnPV" (formula "10") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "10"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "simplifyUpdate3" (formula "10") (term "1,0"))
         (rule "andLeft" (formula "10"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "applyOnRigidFormula" (formula "9"))
         (rule "simplifyUpdate1" (formula "9") (term "1"))
         (rule "applyOnRigidFormula" (formula "13"))
         (rule "applyOnPV" (formula "13") (term "0"))
         (rule "simplifyUpdate1" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "12"))
         (rule "simplifyUpdate1" (formula "12") (term "1"))
         (rule "simplifyUpdate1" (formula "12") (term "0"))
         (rule "applyOnRigidFormula" (formula "11"))
         (rule "simplifyUpdate1" (formula "11") (term "0"))
         (rule "simplifyUpdate1" (formula "11") (term "1"))
         (rule "applyOnRigidTerm" (formula "9") (term "0"))
         (rule "applyOnPV" (formula "9") (term "0,0"))
         (rule "simplifyUpdate1" (formula "9") (term "2,0"))
         (rule "applyOnRigidTerm" (formula "12") (term "1"))
         (rule "simplifyUpdate1" (formula "12") (term "1,1"))
         (rule "applyOnPV" (formula "12") (term "0,1"))
         (rule "simplifyUpdate1" (formula "12") (term "2,1"))
         (rule "applyOnRigidTerm" (formula "12") (term "0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0"))
         (rule "simplifyUpdate1" (formula "12") (term "0,0"))
         (rule "applyOnPV" (formula "12") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "11") (term "0"))
         (rule "simplifyUpdate1" (formula "11") (term "0,0"))
         (rule "simplifyUpdate1" (formula "11") (term "1,0"))
         (rule "applyOnPV" (formula "11") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "11") (term "1"))
         (rule "applyOnPV" (formula "11") (term "0,1"))
         (rule "simplifyUpdate1" (formula "11") (term "1,1"))
         (rule "simplifyUpdate1" (formula "11") (term "2,1"))
         (rule "applyOnRigidTerm" (formula "9") (term "1,0"))
         (rule "simplifyUpdate1" (formula "9") (term "0,1,0"))
         (rule "applyOnRigidTerm" (formula "12") (term "0,0"))
         (rule "applyOnPV" (formula "12") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
         (rule "simplifyUpdate1" (formula "12") (term "2,0,0"))
         (rule "applyOnRigidTerm" (formula "11") (term "0,0"))
         (rule "applyOnPV" (formula "11") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
         (rule "simplifyUpdate1" (formula "11") (term "2,0,0"))
         (rule "applyOnRigidTerm" (formula "9") (term "1,1,0"))
         (rule "applyOnPV" (formula "9") (term "0,1,1,0"))
         (rule "dismissNonSelectedField" (formula "11") (term "0,0"))
         (rule "pullOutSelect" (formula "12") (term "1") (inst "selectSK=Coordinate_y_1"))
         (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "9"))
         (rule "elementOfFreshLocs" (formula "12") (term "1,0,0"))
         (rule "equalUnique" (formula "12") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "12") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "12") (term "0,0,0"))
         (rule "replace_known_right" (formula "12") (term "0,0,1,0,0") (ifseqformula "15"))
         (rule "concrete_not_2" (formula "12") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "12") (term "1,0,0"))
         (rule "dismissNonSelectedField" (formula "12") (term "0,0,1,0,0"))
         (rule "dismissNonSelectedField" (formula "12") (term "0,0,1,0,0"))
         (rule "replace_known_left" (formula "12") (term "0,1,0,0") (ifseqformula "2"))
         (rule "concrete_not_1" (formula "12") (term "1,0,0"))
         (rule "concrete_or_4" (formula "12") (term "0,0"))
         (rule "elementOfSetMinus" (formula "12") (term "0,0"))
         (rule "elementOfAllLocs" (formula "12") (term "0,0,0"))
         (rule "concrete_and_1" (formula "12") (term "0,0"))
         (rule "elementOfFreshLocs" (formula "12") (term "0,0,0"))
         (rule "replace_known_right" (formula "12") (term "0,0,0,0,0") (ifseqformula "15"))
         (rule "concrete_not_2" (formula "12") (term "0,0,0,0"))
         (rule "concrete_and_1" (formula "12") (term "0,0,0"))
         (rule "double_not" (formula "12") (term "0,0"))
         (rule "dismissNonSelectedField" (formula "12") (term "0,0,0"))
         (rule "dismissNonSelectedField" (formula "12") (term "0,0,0"))
         (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "2"))
         (rule "ifthenelse_true" (formula "12") (term "0"))
         (rule "applyEqReverse" (formula "13") (term "1") (ifseqformula "12"))
         (rule "hideAuxiliaryEq" (formula "12"))
         (rule "pullOutSelect" (formula "11") (term "1") (inst "selectSK=Coordinate_x_1"))
         (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "9"))
         (rule "elementOfFreshLocs" (formula "11") (term "1,0,0"))
         (rule "equalUnique" (formula "11") (term "0,1,0,0,0"))
         (rule "concrete_not_2" (formula "11") (term "1,0,0,0"))
         (rule "concrete_and_3" (formula "11") (term "0,0,0"))
         (rule "replace_known_right" (formula "11") (term "0,0,1,0,0") (ifseqformula "15"))
         (rule "concrete_not_2" (formula "11") (term "0,1,0,0"))
         (rule "concrete_and_1" (formula "11") (term "1,0,0"))
         (rule "dismissNonSelectedField" (formula "11") (term "2,0"))
         (rule "dismissNonSelectedField" (formula "11") (term "0,0,1,0,0"))
         (rule "dismissNonSelectedField" (formula "11") (term "0,0,1,0,0"))
         (rule "replace_known_left" (formula "11") (term "0,1,0,0") (ifseqformula "2"))
         (rule "concrete_not_1" (formula "11") (term "1,0,0"))
         (rule "concrete_or_4" (formula "11") (term "0,0"))
         (rule "elementOfSetMinus" (formula "11") (term "0,0"))
         (rule "elementOfAllLocs" (formula "11") (term "0,0,0"))
         (rule "concrete_and_1" (formula "11") (term "0,0"))
         (rule "elementOfFreshLocs" (formula "11") (term "0,0,0"))
         (rule "replace_known_right" (formula "11") (term "0,0,0,0,0") (ifseqformula "15"))
         (rule "concrete_not_2" (formula "11") (term "0,0,0,0"))
         (rule "concrete_and_1" (formula "11") (term "0,0,0"))
         (rule "double_not" (formula "11") (term "0,0"))
         (rule "dismissNonSelectedField" (formula "11") (term "0,0,0"))
         (rule "dismissNonSelectedField" (formula "11") (term "0,0,0"))
         (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "2"))
         (rule "ifthenelse_true" (formula "11") (term "0"))
         (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
         (rule "hideAuxiliaryEq" (formula "11"))
         (rule "pullOutSelect" (formula "12") (term "0,0") (inst "selectSK=Coordinate_y_2"))
         (rule "simplifySelectOfStore" (formula "12"))
         (rule "eqClose" (formula "12") (term "0,0,0,0"))
         (rule "concrete_and_1" (formula "12") (term "0,0,0"))
         (rule "eqClose" (formula "12") (term "0,0,0"))
         (rule "concrete_and_1" (formula "12") (term "0,0"))
         (rule "equalUnique" (formula "12") (term "0,0,0"))
         (rule "concrete_not_2" (formula "12") (term "0,0"))
         (rule "ifthenelse_true" (formula "12") (term "0"))
         (rule "castDel" (formula "12") (term "0"))
         (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "12"))
         (rule "hideAuxiliaryEq" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "0"))
         (rule "polySimp_rightDist" (formula "12") (term "0"))
         (rule "polySimp_homoEq" (formula "12"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0"))
         (rule "polySimp_sepNegMonomial" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "pullOutSelect" (formula "11") (term "0,0") (inst "selectSK=Coordinate_x_2"))
         (rule "simplifySelectOfStore" (formula "11"))
         (rule "equalUnique" (formula "11") (term "0,1,0,0"))
         (rule "concrete_not_2" (formula "11") (term "1,0,0"))
         (rule "concrete_and_3" (formula "11") (term "0,0"))
         (rule "eqClose" (formula "11") (term "0,0,0"))
         (rule "concrete_and_1" (formula "11") (term "0,0"))
         (rule "equalUnique" (formula "11") (term "0,0"))
         (rule "ifthenelse_true" (formula "11") (term "0"))
         (rule "castDel" (formula "11") (term "0"))
         (rule "applyEqReverse" (formula "12") (term "0,0") (ifseqformula "11"))
         (rule "hideAuxiliaryEq" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "0"))
         (rule "polySimp_rightDist" (formula "11") (term "0"))
         (rule "polySimp_homoEq" (formula "11"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0"))
         (rule "polySimp_sepNegMonomial" (formula "11"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0"))
         (rule "polySimp_elimOne" (formula "11") (term "0"))
         (rule "methodCallEmpty" (formula "15") (term "1"))
         (rule "Class_invariant_axiom_for_Coordinate" (formula "13") (inst "sk=sk_2") (ifseqformula "3"))
         (branch "Use Axiom"
            (rule "replaceKnownSelect_taclet000_2" (formula "13") (term "0,0"))
            (rule "replaceKnownSelect_taclet000_0" (formula "13") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "13") (term "0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "13") (term "0,1"))
            (rule "andLeft" (formula "13"))
            (rule "tryEmpty" (formula "16") (term "1"))
            (rule "emptyModality" (formula "16") (term "1"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "simplifyUpdate2" (formula "16") (term "0"))
            (rule "applyOnRigidFormula" (formula "16") (term "1"))
            (rule "applyOnPV" (formula "16") (term "0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1"))
            (rule "eqClose" (formula "16") (term "1"))
            (rule "concrete_and_3" (formula "16"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "simplifyUpdate2" (formula "16") (term "1"))
            (rule "applyOnRigidFormula" (formula "16") (term "0"))
            (rule "applyOnRigidFormula" (formula "16") (term "1"))
            (rule "applyOnPV" (formula "16") (term "0,1"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "0,0,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "eqSymm" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "1,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "eqSymm" (formula "16") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,0"))
            (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,1,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,0,0,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,0,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,0,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0,0"))
            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "11"))
            (rule "concrete_and_1" (formula "16") (term "0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,0,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,0,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
            (rule "replaceKnownSelect_taclet000_0" (formula "16") (term "0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "16") (term "0,1,0"))
            (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "12"))
            (rule "concrete_and_1" (formula "16"))
            (rule "Class_invariant_axiom_for_Coordinate" (formula "16") (inst "sk=sk_3") (ifseqformula "3"))
            (branch "Use Axiom"
               (rule "replaceKnownSelect_taclet000_2" (formula "16") (term "0,0"))
               (rule "replaceKnownSelect_taclet000_0" (formula "16") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "16") (term "0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "16") (term "0,1"))
               (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "14"))
               (rule "concrete_and_3" (formula "16"))
               (rule "close" (formula "16") (ifseqformula "13"))
            )
            (branch "Show Axiom Satisfiability"
               (rule "concrete_eq_1" (formula "16") (term "0"))
               (rule "concrete_eq_2" (formula "16") (term "1"))
               (rule "neq_or" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch "Show Axiom Satisfiability"
            (rule "concrete_eq_1" (formula "14") (term "0"))
            (rule "concrete_eq_2" (formula "14") (term "1"))
            (rule "neq_or" (formula "14"))
            (rule "closeTrue" (formula "14"))
         )
      )
      (branch "Exceptional Post (moveRight)"
         (rule "translateJavaMulInt" (formula "9") (term "1,0,0,0,1,1,1,1,1"))
         (rule "translateJavaMulInt" (formula "9") (term "1,1,0,0,1,1,1,1,1"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "eqSymm" (formula "9") (term "0,0,0,1,1,1,1,1"))
         (rule "eqSymm" (formula "9") (term "1,0,0,1,1,1,1,1"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "andLeft" (formula "9"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "parallelWithSkip2" (formula "9") (term "0"))
         (rule "applyOnElementary" (formula "10") (term "1,0"))
         (rule "applyOnPV" (formula "10") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "10"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "simplifyUpdate3" (formula "10") (term "1,0"))
         (rule "andLeft" (formula "10"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "simplifyUpdate2" (formula "12"))
         (rule "andLeft" (formula "10"))
         (rule "simplifyUpdate2" (formula "10"))
         (rule "andLeft" (formula "12"))
         (rule "simplifyUpdate2" (formula "13"))
         (rule "notLeft" (formula "10"))
         (rule "close" (formula "14") (ifseqformula "13"))
      )
      (branch "Pre (moveRight)"
         (rule "inInt" (formula "9") (term "1,1,1,1"))
         (rule "concrete_and_3" (formula "9") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "9"))
         (rule "simplifyUpdate2" (formula "9") (term "1"))
         (rule "applyOnRigidFormula" (formula "9"))
         (rule "simplifyUpdate2" (formula "9") (term "1"))
         (rule "applyOnRigidFormula" (formula "9") (term "0"))
         (rule "simplifyUpdate2" (formula "9") (term "0,0"))
         (rule "simplifyUpdate2" (formula "9") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "9") (term "1"))
         (rule "applyOnPV" (formula "9") (term "0,1"))
         (rule "wellFormedStorePrimitive" (formula "9") (term "1"))
         (rule "wellFormedStorePrimitive" (formula "9") (term "1"))
         (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "1"))
         (rule "concrete_and_3" (formula "9"))
         (rule "applyOnRigidFormula" (formula "9") (term "1"))
         (rule "applyOnPV" (formula "9") (term "0,1"))
         (rule "simplifyUpdate1" (formula "9") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "9") (term "0"))
         (rule "applyOnPV" (formula "9") (term "0,0"))
         (rule "simplifyUpdate1" (formula "9") (term "1,0"))
         (rule "inEqSimp_gtToGeq" (formula "9") (term "0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0"))
         (rule "mul_literals" (formula "9") (term "1,0"))
         (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "5"))
         (rule "concrete_and_1" (formula "9"))
         (rule "Class_invariant_axiom_for_Coordinate" (formula "9") (inst "sk=sk_1") (ifseqformula "3"))
         (branch "Use Axiom"
            (rule "dismissNonSelectedField" (formula "9") (term "0,0"))
            (rule "pullOutSelect" (formula "9") (term "0,1") (inst "selectSK=Coordinate_y_0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "eqClose" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "eqClose" (formula "1") (term "0,0"))
            (rule "ifthenelse_true" (formula "1") (term "0"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "10") (term "0,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1"))
            (rule "pullOutSelect" (formula "9") (term "0,0") (inst "selectSK=Coordinate_x_0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "eqClose" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "eqClose" (formula "1") (term "0,0"))
            (rule "ifthenelse_true" (formula "1") (term "0"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "10") (term "0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0"))
            (rule "cut_direct" (formula "9") (term "1"))
            (branch "CUT: self.y >= val * -1 TRUE"
               (rule "concrete_and_3" (formula "10"))
               (rule "inEqSimp_geqRight" (formula "10"))
               (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
               (rule "times_zero_1" (formula "8") (term "0,0"))
               (rule "add_zero_left" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
               (rule "qeq_literals" (formula "8") (term "0"))
               (rule "concrete_and_2" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
            (branch "CUT: self.y >= val * -1 FALSE"
               (rule "concrete_and_4" (formula "10"))
               (rule "false_right" (formula "10"))
               (rule "inEqSimp_geqRight" (formula "9"))
               (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
               (rule "times_zero_1" (formula "8") (term "0,0"))
               (rule "add_zero_left" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "8"))
               (rule "qeq_literals" (formula "6") (term "0"))
               (rule "concrete_and_2" (formula "6"))
               (rule "closeFalse" (formula "6"))
            )
         )
         (branch "Show Axiom Satisfiability"
            (rule "concrete_eq_1" (formula "9") (term "0"))
            (rule "concrete_eq_2" (formula "9") (term "1"))
            (rule "neq_or" (formula "9"))
            (rule "closeTrue" (formula "9"))
         )
      )
   )
   (branch "if x false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "8"))
      (rule "simplifyUpdate1" (formula "8") (term "1"))
      (rule "applyOnPV" (formula "8") (term "0"))
      (rule "boolean_equal" (formula "8"))
      (rule "closeTrue" (formula "8"))
   )
)
(branch "Show Axiom Satisfiability"
   (rule "concrete_eq_2" (formula "7") (term "1"))
   (rule "concrete_eq_1" (formula "7") (term "0"))
   (rule "neq_or" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
